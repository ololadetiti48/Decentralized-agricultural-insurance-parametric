;; Weather Trigger Payout Engine - Parametric Insurance
(define-constant contract-owner tx-sender)
(define-constant err-owner-only (err u100))
(define-constant err-not-found (err u101))
(define-constant err-unauthorized (err u102))
(define-constant err-invalid-amount (err u103))
(define-constant err-already-claimed (err u104))
(define-data-var policy-nonce uint u0)
(define-data-var trigger-nonce uint u0)
(define-map policies { policy-id: uint } { farmer: principal, crop-type: (string-ascii 50), coverage-amount: uint, premium: uint, location: (string-ascii 100), trigger-threshold: int, season-start: uint, season-end: uint, active: bool, created-at: uint })
(define-map weather-data { location: (string-ascii 100), date: uint } { rainfall: int, temperature: int, recorded-by: principal, verified: bool })
(define-map triggers { trigger-id: uint } { policy-id: uint, trigger-type: (string-ascii 50), threshold-value: int, actual-value: int, triggered-at: uint, payout-amount: uint })
(define-map payouts { policy-id: uint, trigger-id: uint } { amount: uint, paid: bool, payment-date: uint, status: (string-ascii 20) })
(define-map oracle-registry { oracle: principal } { verified: bool, data-points-submitted: uint, accuracy-score: uint })
(define-read-only (get-policy (policy-id uint)) (map-get? policies { policy-id: policy-id }))
(define-read-only (get-weather-data (location (string-ascii 100)) (date uint)) (map-get? weather-data { location: location, date: date }))
(define-read-only (get-trigger (trigger-id uint)) (map-get? triggers { trigger-id: trigger-id }))
(define-read-only (get-payout (policy-id uint) (trigger-id uint)) (map-get? payouts { policy-id: policy-id, trigger-id: trigger-id }))
(define-read-only (get-oracle (oracle principal)) (map-get? oracle-registry { oracle: oracle }))
(define-public (register-oracle) (begin (map-set oracle-registry { oracle: tx-sender } { verified: false, data-points-submitted: u0, accuracy-score: u0 }) (ok true)))
(define-public (verify-oracle (oracle principal)) (let ((oracle-data (unwrap! (get-oracle oracle) err-not-found))) (asserts! (is-eq tx-sender contract-owner) err-owner-only) (map-set oracle-registry { oracle: oracle } (merge oracle-data { verified: true })) (ok true)))
(define-public (create-policy (crop-type (string-ascii 50)) (coverage-amount uint) (premium uint) (location (string-ascii 100)) (trigger-threshold int) (season-start uint) (season-end uint)) (let ((new-id (+ (var-get policy-nonce) u1))) (asserts! (> coverage-amount u0) err-invalid-amount) (asserts! (> premium u0) err-invalid-amount) (map-set policies { policy-id: new-id } { farmer: tx-sender, crop-type: crop-type, coverage-amount: coverage-amount, premium: premium, location: location, trigger-threshold: trigger-threshold, season-start: season-start, season-end: season-end, active: true, created-at: block-height }) (var-set policy-nonce new-id) (ok new-id)))
(define-public (submit-weather-data (location (string-ascii 100)) (date uint) (rainfall int) (temperature int)) (let ((oracle-data (unwrap! (get-oracle tx-sender) err-not-found))) (asserts! (get verified oracle-data) err-unauthorized) (map-set weather-data { location: location, date: date } { rainfall: rainfall, temperature: temperature, recorded-by: tx-sender, verified: true }) (map-set oracle-registry { oracle: tx-sender } (merge oracle-data { data-points-submitted: (+ (get data-points-submitted oracle-data) u1) })) (ok true)))
(define-public (check-trigger (policy-id uint) (date uint)) (let ((policy (unwrap! (get-policy policy-id) err-not-found)) (weather (unwrap! (get-weather-data (get location policy) date) err-not-found)) (new-trigger-id (+ (var-get trigger-nonce) u1))) (asserts! (get active policy) err-unauthorized) (asserts! (>= block-height (get season-start policy)) err-unauthorized) (asserts! (<= block-height (get season-end policy)) err-unauthorized) (if (< (get rainfall weather) (get trigger-threshold policy)) (begin (map-set triggers { trigger-id: new-trigger-id } { policy-id: policy-id, trigger-type: "drought", threshold-value: (get trigger-threshold policy), actual-value: (get rainfall weather), triggered-at: block-height, payout-amount: (get coverage-amount policy) }) (map-set payouts { policy-id: policy-id, trigger-id: new-trigger-id } { amount: (get coverage-amount policy), paid: false, payment-date: u0, status: "pending" }) (var-set trigger-nonce new-trigger-id) (ok new-trigger-id)) (ok u0))))
(define-public (execute-payout (policy-id uint) (trigger-id uint)) (let ((payout (unwrap! (get-payout policy-id trigger-id) err-not-found)) (trigger (unwrap! (get-trigger trigger-id) err-not-found)) (policy (unwrap! (get-policy policy-id) err-not-found))) (asserts! (is-eq (get status payout) "pending") err-already-claimed) (asserts! (not (get paid payout)) err-already-claimed) (map-set payouts { policy-id: policy-id, trigger-id: trigger-id } (merge payout { paid: true, payment-date: block-height, status: "completed" })) (ok true)))
(define-public (cancel-policy (policy-id uint)) (let ((policy (unwrap! (get-policy policy-id) err-not-found))) (asserts! (is-eq tx-sender (get farmer policy)) err-unauthorized) (map-set policies { policy-id: policy-id } (merge policy { active: false })) (ok true)))
(define-public (update-oracle-score (oracle principal) (score uint)) (let ((oracle-data (unwrap! (get-oracle oracle) err-not-found))) (asserts! (is-eq tx-sender contract-owner) err-owner-only) (map-set oracle-registry { oracle: oracle } (merge oracle-data { accuracy-score: score })) (ok true)))
